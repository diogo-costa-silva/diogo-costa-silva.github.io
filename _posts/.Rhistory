#
library(ggeffects)
#
g_pred1 = ggpredict(glm_model1, terms = c('education', 'd'))
g_pred1
#
g_pred1 = ggpredict(glm_model1, terms = c('education[all]', 'd'))
g_pred1 = as.data.frame(g_pred1)
g_pred1
#
ggplot(g_pred1, aes(x, predicted, colour = group))  +
geom_point() + geom_line() + xlab('Education') +
scale_x_continuous(breaks = seq(-3,3,by=1)) + theme_minimal()
fp = function(L, k, x0,x){
p = L/(1+exp(-k(x-x0)))
return(p)
}
fp(L = 1, k = 1, x0 = 0, x=seq(-4,4,by=1))
fp = function(L, k, x0,x){
p = L/(1+exp(-k(x-x0)))
return(p)
}
fp(L = 1, k = 1, x0 = 0, x=seq(-4,4,by=1))
fp = function(L, k, x0,x){
p = L/(1+exp(-k*(x-x0)))
return(p)
}
fp(L = 1, k = 1, x0 = 0, x=seq(-4,4,by=1))
xvalues = seq(-4,4,by=1)
fp1 = fp(L = 1, k = 1, x0 = 0, x=)
plot(xvalues, fp1)
xvalues = seq(-4,4,by=1)
fp1 = fp(L = 1, k = 1, x0 = 0, x=xvalues)
#
plot(xvalues, fp1)
lines(xvalues, fp1)
fp2 = fp(L = 1, k = 4, x0 = 0, x=xvalues)
lines(xvalues, fp2)
#
pop_growth = function(r, P, K){
out = (r*P)*(1 - (P/K))
return(out)
}
1.1*100
100 + 100^1.1
100 + 100^1.1*(1:10)
f1 = function(p0, r, t){
out1 = p0+exp(r*t)
return(out1)
}
f1(p0 = 10, r = 1.1, t = 10)
f1(p0 = 10, r = 1.1, t = 2)
#
f2 = function(p0, r, t){
out1 = p0 * (1+r)^t
return(out1)
}
f2(p0 = 10, r = 1.1, t = 2)
f1(p0 = 10, r = 1.1, t = 2)
#
f2(p0 = 10, r = 0.1, t = 2)
f1(p0 = 10, r = 0.1, t = 2)
1.1*100
0.1*100
#
100 + 0.1*100
#
1.1*100
#
i = 100
g=0.1
1+g
(1+g)*i
#
((1+g)*i)*2
#
2*2
2^2
#
2*2*2
2^3
#
2*2*2*4
#
2*2*2*2
2^4
#
((1+g)*i)
#
((1+g)*i)^2
#
((1+g)*i)^1
#
((1+g)*i)^3
#
1^((1+g)*i)
t = 2
#
(i*(1+g)^t)
#
i = 100
g=0.1
t = 2
#
(i*(1+g)^t)
#
1+g
(1+g)^t
t = 4
#
(i*(1+g)^t)
plot((i*(1+g)^c(1:10)))
#
plot((i*(1+g)^c(1:100)))
exp(1:100)
lines(exp(1:100))
2.71^2
100 + 2.71^2
#
i = 100
g=0.1
t = 2
#
(i*(1+g)^t)
#
100 + 2.71^2
#
plot( 100 + 2.71^2 )
plot( 100 + 2.71^c(1:50) )
plot( 100 + 2.71^c(1:25) )
#
plot((i*(1+g)^c(1:100)))
lines( 100 + 2.71^c(1:25) )
#
i = 125000
g=0.16
t = 2
#
(i*(1+g)^t)
#
i = 125000
g=0.016
t = 2
#
(i*(1+g)^t)
1+g
#
i = 125000
g=0.016
t = 1
#
(i*(1+g)^t)
#
growth_rate = function(i, g, t){
out = (i*(1+g)^t)
return(out)
}
#
growth_rate = function(i, g, t, decay = F){
if(decay == F){
out = (i*(1+g)^t)
}
if(decay == T){
g = 100-g
out = (i*(1+g)^t)
}
return(out)
}
#
growth_rate = function(i, g, t, decay = F){
message("ex. 1.6% growth, set g=0.016")
#
if(decay == F){
out = (i*(1+g)^t)
}
if(decay == T){
g = 100-g
out = (i*(1+g)^t)
}
return(out)
}
growth_rate(i = 857, g = 0.016, t = 1)
#
growth_rate = function(i, g, t, decay = F){
message("ex. 1.6% growth, set g=0.016, for 56%, g=0.56")
#
if(decay == F){
out = (i*(1+g)^t)
}
if(decay == T){
g = 100-g
out = (i*(1+g)^t)
}
return(out)
}
growth_rate(i = 857, g = 0.016, t = 1)
growth_rate(i = 857000, g = 0.016, t = 1)
growth_rate(i = 857000, g = 0.016, t = 1, decay = T)
print(paste("Decay of", g))
#
growth_rate = function(i, g, t, decay = F){
message("ex. 1.6% growth, set g=0.016, for 56%, g=0.56")
#
if(decay == F){
out = (i*(1+g)^t)
}
if(decay == T){
g = 100-g
print(paste("Decay of", g))
out = (i*(1+g)^t)
}
return(out)
}
#
growth_rate(i = 857000, g = 0.016, t = 1, decay = T)
#
growth_rate = function(i, g, t, decay = F){
message("ex. 1.6% growth, set g=0.016, for 56%, g=0.56")
#
if(decay == F){
out = (i*(1+g)^t)
}
if(decay == T){
g = 100-g
print(paste("Decay set to", g))
out = (i*(1+g)^t)
}
return(out)
}
#
growth_rate(i = 857000, g = 0.016, t = 1, decay = T)
#
growth_rate = function(i, g, t, decay = F){
message("ex. 1.6% growth, set g=0.016, for 56%, g=0.56")
#
if(decay == F){
out = (i*(1+g)^t)
}
if(decay == T){
print("Decay")
out = (i*(1-g)^t)
}
return(out)
}
#
growth_rate(i = 857000, g = 0.016, t = 1, decay = T)
#
growth_rate(i = 857000, g = 0.016, t = 10, decay = T)
#
growth_rate = function(i, g, t, decay = F){
message("ex. 1.6% growth, set g=0.016, for 56%, g=0.56")
#
if(decay == F){
print(paste("Initial value of", i))
out = (i*(1+g)^t)
}
if(decay == T){
print(paste("Initial value of", i))
print("Decay")
out = (i*(1-g)^t)
}
return(out)
}
#
growth_rate(i = 857000, g = 0.016, t = 10, decay = T)
#
growth_rate(i = 857000, g = 0.016, t = 64, decay = T)
#
growth_rate(i = 18000, g = 0.017, t = 5, decay = T)
#
growth_rate(i = 18000, g = 0.017, t = 5, decay = F)
#
growth_rate(i = 100, g = 0.02, t = 20, decay = F)
100*0.02
(100*0.02)*20
(100*0.02)^20
100*0.02
100*0.02
100+100*0.02
100+1.02
100*1.02
#
100+100*0.02
100*1.02
100*(1+0.02)#
#
100+100*0.02 #
100*1.02 #
100*(1+0.02)#
#
100*(1+0.02)^2
#
100*(1+0.02)*2
#
100*(1+0.02)*2
#
100*(1+0.02)^2
#
100*(1+0.02)^10
#
100*(1+0.02)^2
# inflation #
growth_rate(i = 100, g = 0.02, t = 20)
# inflation #
growth_rate(i = 100, g = 0.02, t = 2)
#
100*(1+0.02)^2
# inflation #
growth_rate(i = 100, g = 0.02, t = 2)
#
growth_rate(i = 15, g = 0.07, t = 2)
#
growth_rate(i = 15, g = 0.07, t = 10)
#
growth_rate(i = 15, g = 0.07, t = 365)
#
growth_rate(i = 15, g = 0.07, t = 365)
#
growth_rate(i = 15, g = 0.07, t = 30)
#
growth_rate(i = 15, g = 0.07, t = 90)
(6616.545-15)/15
#
growth_rate(i = 1, g = 1, t = 2)
#
growth_rate(i = 1, g = 0.1, t = 2)
#
growth_rate(i = 1, g = 0.5, t = 2)
#
growth_rate(i = 1, g = 1, t = 2)
#
growth_rate(i = 1, g = 1, t = 1)
#
growth_rate(i = 1, g = 1, t = 0)
growth_rate(i = 1, g = 1, t = 1)
#
growth_rate(i = 1, g = 1, t = 0:10)
exp(1*1)
exp(1*0.2)
exp(1*0.2*2)
exp(1000*0.2*2)
0.2*2
exp(0.2*2)
1000 * exp(0.2*2)
2
1000 * exp(0.2*seq(0,10,by = 0.001))
plot( 1000 * exp(0.2*seq(0,10,by = 0.001)) )
plot( 1000 * exp(0.2*seq(0,10,by = 0.01)) )
seq(0,10,by = 0.01)
plot(seq(0,10,by = 0.01), 1000 * exp(0.2*seq(0,10,by = 0.01)) )
#
exp_growth = function(i,g,t){
out = i * exp(g*t)
return(out)
}
exp_growth(i = 1000, g = 0.2, t = 10)
growth_rate(i = 1000, g = 0.02, t = 10)
exp_growth(i = 1000, g = 0.2, t = 10)
#
growth_rate = function(i, g, t, decay = F){
message("ex. 1.6% growth, set g=0.016, for 56%, g=0.56, for 100%, g=1")
#
if(decay == F){
print(paste("Initial value of", i))
out = (i*(1+g)^t)
}
if(decay == T){
print(paste("Initial value of", i))
print("Decay")
out = (i*(1-g)^t)
}
return(out)
}
growth_rate(i = 1000, g = 0.02, t = 10)
exp_growth(i = 1000, g = 0.2, t = 10)
growth_rate(i = 1000, g = 0.2, t = 10)
exp_growth(i = 1000, g = 0.2, t = 10)
time_seq = seq(0,10,by=1)
exp_growth(i = 1000, g = 0.2, t = time_seq)
#
g1=growth_rate(i = 1000, g = 0.2, t = time_seq)
g2=exp_growth(i = 1000, g = 0.2, t = time_seq)
plot(time_seq, g1,g2)
plot(time_seq, g1)
plot(time_seq, g2, type = 'n')
plot(time_seq, g2, type = 'n')
lines(time_seq, g2)
lines(time_seq, g1)
point(time_seq, g1)
#
plot(time_seq, g2, type = 'n')
lines(time_seq, g2)
points(time_seq, g1)
plogis(-2)
exp(-2)/(1+exp(-2))
#
N=500
education = rnorm(N,0,1)
d = rbinom(N, 1, 0.5)
error = rnorm(N)
y = 1.5*education + (-2*d) + error
hist(y)
y_proba = plogis(y)
hist(y_proba)
#
y_dummy = rbinom(n = N, size = 1, prob = y_proba)
df_sim = data.frame(id = 1:N, education, d, y, y_proba, y_dummy)
# + d
glm_model1 = glm(y_dummy ~ education + d, data = df_sim, family = 'binomial')
glm_model1
glm_model1
tidy(glm_model1)
tidy(glm_model1, exponentiate = T)
tidy(glm_model1, exponentiate = F)
tidy(glm_model1, exponentiate = F)
coef(glm_model1$coefficients)
coef(glm_model1)
exp(coef(glm_model1))
texreg::htmlreg(glm_model1)
tidy(glm_model1)
xtable(tidy(glm_model1))
#
library(ggeffects)
#
g_pred1 = ggpredict(glm_model1, terms = c('education[all]', 'd'))
g_pred1 = as.data.frame(g_pred1)
#
#
ggplot(g_pred1, aes(x, predicted, colour = group))  +
geom_point() + geom_line() + xlab('Education') +
scale_x_continuous(breaks = seq(-3,3,by=1)) + theme_minimal()
#
#
# + d
glm_model1 = glm(y_dummy ~ education + d, data = df_sim, family = 'binomial')
tidy(glm_model1, exponentiate = F)
exp(coef(glm_model1))
#
xtable(tidy(glm_model1))
#
library(ggeffects)
#
g_pred1 = ggpredict(glm_model1, terms = c('education[all]', 'd'))
g_pred1 = as.data.frame(g_pred1)
#
#
ggplot(g_pred1, aes(x, predicted, colour = group))  +
geom_point() + geom_line() + xlab('Education') +
scale_x_continuous(breaks = seq(-3,3,by=1)) + theme_minimal()
#
#
13/5
100*2.6
9/2
#
13/5
9/2
1/10
1/9
f_proba = function(odds) odds / (1 + odds)
f_proba(odds = 5)
f_proba(odds = 5)
f_proba(odds = 8)
f_proba(odds = 1)
f_proba(odds = 0.8)
f_proba(odds = 9)
f_proba(odds = 99999)
f_proba(odds = 3)
f_proba(odds = 2)
f_proba(odds = 1)
f_proba(odds = 0)
log(0.2/0.8)
f_proba(odds = 0)
log(0.2) - log(0.8)
log(0.2) - log(0.8)
log(0.2/0.8)
log(0.2/0.8) == log(0.2) - log(0.8)
log(q0)
log(10)
exp(2.302585)
f_proba(odds = 4)
# pi to odds
f_proba_to_odds = function(p) p / (1-p)
# odds to pi
f_proba_from_odds = function(odds) odds / (1+odds)
# pi to log-odds
f_proba_to_log_odds = function(p){
log_odds = log(p / (1-p))
return(log_odds)
}
# log-odds to pi
f_log_odds_to_proba = function(log_odds){
p = exp(log_odds) / (1 + exp(log_odds))
return(p)
}
f_proba_to_odds(p = 0.8)
f_proba_from_odds(odds = 4)
f_proba_to_log_odds(p = 0.8)
f_log_odds_to_proba(log_odds = 1.386294)
f_proba_to_odds(p = 0.8)
f_proba_from_odds(odds = 4)
f_proba_to_log_odds(p = 0.8)
f_log_odds_to_proba(log_odds = 1.386294)
```
f_proba_to_odds(p = 0.8)
f_proba_from_odds(odds = 4)
f_proba_to_log_odds(p = 0.8)
f_proba_to_odds(p = 0.8) # = 4
f_proba_from_odds(odds = 4) # = 0.8
f_proba_to_log_odds(p = 0.8) # = 1.386
f_log_odds_to_proba(log_odds = 1.386294) #
```
